// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.BusinessLibrary.V1.NotificationsManager_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using Moq;
    using NotificationService.BusinessLibrary.Business.V1;
    using NotificationService.Contracts;
    using NotificationService.Contracts.Entities.Web;
    using NotificationService.Contracts.Models.Graph;
    using NotificationService.Data.Interfaces;
    using NotificationService.Common.Logger;

    /// <summary>
    /// Test class.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class NotificationsTestsBase
    {
        private static Dictionary<string, string> personOIdMap = new Dictionary<string, string>
        {
            { "P1", Guid.NewGuid().ToString() },
            { "P2", Guid.NewGuid().ToString() },
            { "P3", Guid.NewGuid().ToString() },
        };

        /// <summary>
        /// The logger mock.
        /// </summary>
        protected Mock<ILogger> loggerMock;

        /// <summary>
        /// Gets or sets the notifications repository mock.
        /// </summary>
        /// <value>
        /// The notifications repository mock.
        /// </value>
        public Mock<IRepository<WebNotificationItemEntity>> notificationsRepositoryMock { get; set; }

        /// <summary>
        /// Gets or sets the notification manager.
        /// </summary>
        /// <value>
        /// The notification manager.
        /// </value>
        public NotificationsManager NotificationManager { get; set; }

        /// <summary>
        /// Gets the name of the application.
        /// </summary>
        /// <value>
        /// The name of the application.
        /// </value>
        public string ApplicationName { get; } = "Application 1";

        /// <summary>
        /// Gets or sets the notification identifier.
        /// </summary>
        /// <value>
        /// The notification identifier.
        /// </value>
        public string NotificationId { get; set; }

        /// <summary>
        /// Gets the notification entities.
        /// </summary>
        /// <value>
        /// The notification entities.
        /// </value>
        public IList<WebNotificationItemEntity> NotificationEntities => new List<WebNotificationItemEntity>()
            {
                new WebNotificationItemEntity
                {
                    Application = "Other Application",
                    Id = "Test Id #1",
                    Title = "Test Title 1",
                    Body = "Test Body 1",
                    NotificationId = "Notification Id #1",
                    Priority = NotificationPriority.Normal,
                    Recipient = new Person { Name = "P1", Email = "abc@xyz.com", ObjectIdentifier = personOIdMap["P1"] },
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(1),
                    SendOnUtcDate = DateTime.UtcNow.AddHours(-1),
                    ReadStatus = NotificationReadStatus.New,
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(1),
                    DeliveredOnChannel=new Dictionary<NotificationDeliveryChannel, bool>
                    {
                        {NotificationDeliveryChannel.Web, true },
                    },
                    TrackingId = "Tracking Id #1",
                },
                new WebNotificationItemEntity
                {
                    Application = this.ApplicationName,
                    Id = "TestId #2",
                    Title = "Test Title 2",
                    Body = "Test Body 2",
                    NotificationId = "Notification Id #2",
                    Priority = NotificationPriority.Normal,
                    Recipient = new Person { Name = "P2", Email = "pqr@xyz.com", ObjectIdentifier = personOIdMap["P2"] },
                    PublishOnUTCDate = DateTime.UtcNow.AddHours(-1),
                    SendOnUtcDate = DateTime.UtcNow.AddHours(-1),
                    ReadStatus = NotificationReadStatus.New,
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(3),
                    DeliveredOnChannel=new Dictionary<NotificationDeliveryChannel, bool>
                    {
                        {NotificationDeliveryChannel.Web, false },
                    },
                    TrackingId = "Tracking Id #2",
                },
                new WebNotificationItemEntity
                {
                    Application = this.ApplicationName,
                    Id = "TestId #3",
                    Title = "Test Title 3",
                    Body = "Test Body 3",
                    NotificationId = "Notification Id #3",
                    Priority = NotificationPriority.High,
                    Recipient = new Person { Name = "P3", Email = "lmn@xyz.com", ObjectIdentifier = personOIdMap["P3"] },
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(-2),
                    SendOnUtcDate = DateTime.UtcNow.AddHours(-3),
                    ReadStatus = NotificationReadStatus.New,
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(2),
                    DeliveredOnChannel=new Dictionary<NotificationDeliveryChannel, bool>
                    {
                        {NotificationDeliveryChannel.Web, false },
                    },
                    TrackingId = "Tracking Id #3",
                },
                new WebNotificationItemEntity
                {
                    Application = this.ApplicationName,
                    Id = "TestId #4",
                    Title = "Test Title 4",
                    Body = "Test Body 4",
                    NotificationId = "Notification Id #4",
                    Priority = NotificationPriority.Normal,
                    Recipient = new Person { Name = "P2", Email = "pqr@xyz.com", ObjectIdentifier = personOIdMap["P2"] },
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(-2),
                    SendOnUtcDate = DateTime.UtcNow.AddHours(-3),
                    ReadStatus = NotificationReadStatus.New,
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(-1),
                    DeliveredOnChannel=new Dictionary<NotificationDeliveryChannel, bool>
                    {
                        {NotificationDeliveryChannel.Web, false },
                    },
                    TrackingId = "Tracking Id #4",
                },
            };

        /// <summary>
        /// Setups the base.
        /// </summary>
        public virtual void SetupBase()
        {
            this.loggerMock = new Mock<ILogger>();
            this.notificationsRepositoryMock = new Mock<IRepository<WebNotificationItemEntity>>();
            this.NotificationManager = new NotificationsManager(this.notificationsRepositoryMock.Object, this.loggerMock.Object);
        }
    }
}
